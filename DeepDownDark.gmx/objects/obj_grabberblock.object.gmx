<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_asteroiddebis</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>min_speed = 0.1;
deceleration = 0.001;
bouncecount = 0;
debrisdamage = 0;     //how much damage collision with debris does
lifespan = random_range(80, 120);

image_speed = 0;
image_index = irandom_range(0,9);
image_angle = irandom(360);
// start moving

direction = random_range(0, 359);
speed = random_range(0.1, 0.4);
image_angle = random(360);

homing = false;
aimx = x;
aimy = y;
count = 0;     //how often blocks move inside the grabber
target = instance_nearest(x, y, obj_grabber);

slowspeed = random_range(2, 5);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if hspeed &gt;= min_speed || hspeed &lt;= -min_speed
    {
    
        hspeed -= (sign(hspeed) * deceleration);
    
    }

else
    {
        hspeed = sign(hspeed) * min_speed;
    }


if vspeed &gt;= min_speed || vspeed &lt;= -min_speed
    {
    
        vspeed -= (sign(vspeed) * deceleration);
    
    }
    
else
    {
        vspeed = sign(vspeed) * min_speed;
    }

lifespan -=1;
    
if lifespan &lt;= random_range(-10, 0)
   {
   
        instance_destroy();
    
    }

    
if homing == true
{

    if count &lt;= 0 
        {
            count = 30;
            offsetx = random_range(-12, 12);
            offsety = random_range(-12, 12);                      
        }
    if instance_exists(target)
        {
            aimx = target.x + offsetx;
            aimy = target.y + offsety;
        }
    count -= 1;
    direction = point_direction(x, y, aimx, aimy);

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
