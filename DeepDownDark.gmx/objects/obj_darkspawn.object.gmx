<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_darkspawn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise

image_scale = 0.2;
max_scale = 1.0;
image_yscale = image_scale + random_range(-0.25,0.05);
image_xscale = image_scale + random_range(-0.05,0.25);
scale_inc = 0.08;
timetospawn = 0;   //30 + irandom_range(-5,5);
leftcount = 2 + irandom_range(0,2);       //maximum to the left in a row
rightcount = 2 + irandom_range(0,2);      //max to the right in a row
left = false;
right = false;

angleoffset = 50;       //how much left or right to turn when spawning
extraoffset = 15;        //how much additional random turn to do
distcheck = 36;     //how far to check along direction for free space before spawning

wakeuprange = 250;      //distance from player to wakeup
wakeup = false;


lifespan = 1200;
currenthealth = 1;


direction = image_angle;
speed = 0;
maxspeed = scale_inc * 32;
maxsidespeed = scale_inc * 35;
deceleration = 0.01;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if distance_to_object(obj_player) &lt;= wakeuprange &amp;&amp; wakeup == false
{
    wakeup = true
    speed = maxspeed;
}    

if wakeup == true
{

    // once spawned, start growing and start timer until spawn a new one

    
    
    if image_scale &lt; max_scale
        {
            image_scale += scale_inc;
            image_xscale += scale_inc;
            image_yscale += scale_inc;
            if speed &gt; 0 speed -= deceleration;
            if speed &lt;= 0 speed = 0;                                    
        }
    
    if image_scale &gt;= max_scale
        {
            speed = 0;
            timetospawn -= 1;
            if random (0.5) &lt; 1 left = true else right = true
            //spawning next one

                    /*
                    if centre &gt; 0   //spawn centre first
                        {            
                            
                            centre -= 1; 
                            offset = irandom_range(-10,10);
                            angle = image_angle + offset;
                            aimx = x + lengthdir_x(24, angle);
                            aimy = y + lengthdir_y(23, angle);
                            checkspawnpoint = collision_point(aimx, aimy, all, false, true);
                            instance_create(aimx, aimy, debug_spot); 
                            if checkspawnpoint == noone
                                {
                                    inst = instance_create(x, y, obj_darkspawn);        
                                    with(inst)
                                        {
                                            image_angle = other.image_angle + other.offset;
                                            direction = other.angle;
                                            centre = other.centre;
                                            timetospawn = irandom_range(0,5);                
                                        }
                                               
                                }
                            centre = 0;
                            next = false;
                        }
                    */
                    if timetospawn &lt;= 0 &amp;&amp; leftcount &gt; 0 &amp;&amp; left == true   //spawn left 
                        {            
                            leftcount -= 1;
                            offset = irandom_range(-10,extraoffset); 
                            angle = image_angle - angleoffset + offset;
                            aimx = x + lengthdir_x(distcheck, angle);
                            aimy = y + lengthdir_y(distcheck, angle);
                            checkspawnpoint = collision_point(aimx, aimy, all, false, true);
                            //instance_create(aimx, aimy, debug_spot); 
                            if checkspawnpoint == noone
                                {
                                    inst = instance_create(x, y, obj_darkspawn);        
                                    with(inst)
                                        {
                                            image_angle = other.image_angle + other.offset;
                                            direction = other.angle;
                                            leftcount = other.leftcount;
                                            rightcount = irandom_range(2,3);
                                            maxspeed = other.maxsidespeed;
                                            timetospawn = 10;
                                            //wakeup = true                
                                        }       
                                }
                            
                            timetospawn = 10;
                            right = true;            
                        }
                    if timetospawn &lt;= 0 &amp;&amp; rightcount &gt; 0 &amp;&amp; right == true  //spawn right
                        {            
                            rightcount -= 1
                            offset = irandom_range(-extraoffset, 10)
                            angle = image_angle + angleoffset + offset;
                            aimx = x + lengthdir_x(distcheck, angle);
                            aimy = y + lengthdir_y(distcheck, angle);
                            checkspawnpoint = collision_point(aimx, aimy, all, false, true);
                            //instance_create(aimx, aimy, debug_spot); 
                            if checkspawnpoint == noone
                                {
                                    inst = instance_create(x, y, obj_darkspawn);        
                                    with(inst)
                                        {
                                            image_angle = other.image_angle + other.offset;
                                            direction = other.angle;
                                            rightcount = other.rightcount;
                                            leftcount = irandom_range(2,3);
                                            maxspeed = other.maxsidespeed;
                                            timetospawn = 10;
                                            //wakeup = true                 
                                        }       
                                }
                            
                            timetospawn = 10;
                            left = true;                                           
                        }                
                    }
                
 if currenthealth &lt;= 0
 {
    instance_destroy();
 }            
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
