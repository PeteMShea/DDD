<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//These are calculated in script - changing them here will do nothing.
cameraSpacePosX = 0.0;
cameraSpacePosY = 0.0;


//Currently sprites appear to be located at z = 0.5. Making the light's z
//position higher will move it towards the camera and away from the object,
//making shadows shorter, falloff less dramatic, etc.
zPosition = -0.7;        //0.7

//Simply the colour of the light. Reduce all three to make the light less
//bright.
baseLightlevel = 0.9;
colourRed = baseLightlevel;
colourGreen = baseLightlevel;
colourBlue = baseLightlevel;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
x = obj_sharkturret.x + 16;
y = obj_sharkturret.y - 16;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//In shader code, the vertex position appears to be in camera space. So it only has
//to happen once per light, rather than once per object, we'll fix this by
//calculating the light's position in camera space.

//Note - for the moment, I'm not going to handle rotating views, but
//adding that later shouldn't be super challenging.

//The first part of that takes the current view's extremes.
leftExtreme = view_xview[view_current];
upperExtreme = view_yview[view_current];
rightExtreme = leftExtreme + view_wview[view_current];
lowerExtreme = upperExtreme + view_hview[view_current];

cameraSpacePosX = x - leftExtreme;
cameraSpacePosY = (y - lowerExtreme) * -1;

cameraSpacePosX /= view_wview[view_current];
cameraSpacePosY /= view_hview[view_current];

cameraSpacePosX = cameraSpacePosX * 2.0 - 1.0;
cameraSpacePosY = cameraSpacePosY * 2.0 - 1.0;

//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
