<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spiker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>30</depth>
  <persistent>0</persistent>
  <parentName>obj_block</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise

image_speed = 0;
image_index = 0;

inst = instance_create(x, y, obj_spikermask);
angle = image_angle;
with (inst)
{
    parent = other.id;
    image_angle = other.angle;
    
}
once = false;
awake = false;
spikesready = false;
awakerange = 600;
spikeangle[1] = 52;
spikeangle[2] = 36;
spikeangle[3] = 18;
spikeangle[4] = 0;
spikeangle[5] = 342;
spikeangle[6] = 324;
spikeangle[7] = 308;
fired = false;

zoneoffset = 100;       //how far 'above' spiker to test circular firerange against
firerange = 250;
firespeed = 2;

sleepmaxtime = 500;    //how quickly reloads
sleeptime = sleepmaxtime;

maxhealth = 20;
currenthealth = maxhealth;
dead = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.pause == false
{
//-------------------------------------------------------------
if once == false
    {
        zonex = x + lengthdir_x(zoneoffset, image_angle);
        zoney = y + lengthdir_y(zoneoffset, image_angle);
        once = true;
    
    }



if awake == false &amp;&amp; dead == false
{
    playerdist = point_distance(x, y, obj_player.x, obj_player.y);
    if playerdist &lt;= awakerange
        {
            awake = true;        
        }
}

if awake == true &amp;&amp; spikesready == false &amp;&amp; dead == false
{
    for(i = 1; i &lt; 8; i+=1)         //spawn spikes at various angles
        {
            angle = spikeangle[i] + image_angle;
            spike[i] = instance_create(x + lengthdir_x(60, angle), y + lengthdir_y(60, angle), obj_spike);
            with(spike[i])
                {
                    image_angle = other.angle;
                }
        }
    spikesready = true;
}

if awake == true &amp;&amp; fired == false
{
    playerdist = point_distance(zonex, zoney, obj_player.x, obj_player.y);
    if playerdist &lt;= firerange || dead == true
        {
            for(i = 1; i &lt; 8; i+=1)         //fire spikes at various angles using force from behind
                {                                                               
                    with(spike[i])
                        {
                            fire = true;
                        }
                }
            fired = true;

            show_debug_message("Spikes Away!");                        
        }

}

if fired == true &amp;&amp; dead == false            //reload after sleeptime has passed
    {
        sleeptime -=1;
        if sleeptime &lt;= 0 &amp;&amp; sleeptime &gt; -10
            {
                awake = false;
                spikesready = false;
                fired = false;
                sleeptime = sleepmaxtime;    
            }
    }


// damage and death
if currenthealth &lt;= maxhealth * 0.75 &amp;&amp; currenthealth &gt; maxhealth * 0.5 image_index = 1;
if currenthealth &lt;= maxhealth * 0.5 &amp;&amp; currenthealth &gt; maxhealth * 0.25 image_index = 2;
if currenthealth &lt;= maxhealth * 0.25 &amp;&amp; currenthealth &gt; 0 image_index = 3;

if currenthealth &lt;= 0 &amp;&amp; dead == false
{
    image_index = 4;
    //inst = instance_nearest(x, y, obj_spikermask)
    //with (inst) instance_destroy();
    if instance_exists(obj_spike) obj_spike.fire = true;      //fire any remaining spikes so they clean up
    colour = make_colour_rgb(160, 178, 161);
    for (i = 0; i &lt;8; i+=1)            //spawn debris
        {
            sx = x + lengthdir_x(30, image_angle);
            sy = y + lengthdir_y(30, image_angle);
            bx = sx + random_range(-30, 30);
            by = sy + random_range(-30, 30);
            script_execute(scr_grabberdebris, bx, by);
            bx = sx + random_range(-30, 30);
            by = sy + random_range(-30, 30);            
            script_execute(scr_particleburst, bx, by, colour);
            bx = sx + random_range(-30, 30);
            by = sy + random_range(-30, 30);            
            script_execute(scr_particleburst, bx, by, colour);                       
        }
    dead = true;
}















//---------------------------------------------------------------
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
