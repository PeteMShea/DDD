<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_formlessball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise

scale = 0.2;
scaleinc = 0.1;
ballspeed = 0;
acceleration = 0.2;
maxspeed = 9.0;
launch = false;
lifespan = 180;
balldamage = 5;
coltest = noone;
hit = noone;
startx = x;
starty = y;
disttoclear = 64;


audio_sound_gain(snd_FormlessSnakesFire, 0.5, 0.0);
audio_play_sound_at(snd_FormlessSnakesFire, x, y, 0, 400, 1000, 1, false, 100);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pause == false
{
//--------------------------------------------
// scale up on spawn

if scale &lt; 1.0
    {
        scale += scaleinc;
        image_xscale = scale;
        image_yscale = scale;
    }

 
    
    
// accelerate on launch
if launch == true
    {
        if ballspeed &lt; maxspeed ballspeed += acceleration        
       // Movement
        destx = x + lengthdir_x(500, fireangle);
        desty = y + lengthdir_y(500, fireangle);
        
        vx = (destx - x);
        vy = (desty - y);
            
        if vx != 0 || vy != 0 len = sqrt(vx * vx + vy * vy) else len = 0;
        
        if len != 0
        {    
        vx = vx / len;
        vy = vy / len;
        }
        // remove bullets over time if no collision
        lifespan -= 1;
        if lifespan &lt;= 0 instance_destroy();        
        cleardist = abs(distance_to_point(startx, starty));
        if cleardist &gt; 32
            {   
                //spawn blacksnakes
                spawnx = x + random_range(-15, 15);
                spawny = y + random_range(-15, 15);
                snakeangle = image_angle;              
                inst = instance_create(spawnx, spawny, obj_fssnake);
                with (inst)
                            {
                                image_angle = other.snakeangle;
                                direction = other.snakeangle;
                                speed = other.ballspeed;
                                lifespan = irandom_range(30,45);
                            }        
            }     
        //once completely free from mouth start testing collisions
        if cleardist &gt; disttoclear
            {               
                if coltest == noone coltest = instance_place( x + lengthdir_x(10, image_angle) + vx * ballspeed , y+ lengthdir_y(10, image_angle) + vy * ballspeed , obj_player);
                if coltest == noone coltest = instance_place( x + lengthdir_x(10, image_angle) + vx * ballspeed, y+ lengthdir_y(10, image_angle) + vy * ballspeed, obj_block);
                if coltest == noone coltest = instance_place( x + lengthdir_x(10, image_angle) + vx * ballspeed, y+ lengthdir_y(10, image_angle) + vy * ballspeed, obj_asteroid);
                //coltest = instance_place( x + vx * ballspeed, y + vy * ballspeed, all);                            
            }

        x += vx * ballspeed * 60 * delta_time /1000000;
        y += vy * ballspeed * 60 * delta_time /1000000;

        // Collision detection and resolution
        if coltest != noone &amp;&amp; hit == noone
                    {
                        with(coltest)
                            {
                                other.hit = object_get_name(object_index);
                            }
                        //show_debug_message(string(hit));    
                        if string(hit) != "obj_fssnake"
                        {
                            audio_sound_gain(snd_FormlessSnakesHit, 0.5, 0.0);
                            audio_play_sound_at(snd_FormlessSnakesHit, x, y, 0, 400, 1000, 1, false, 100);
                            
                            lifespan = 1;
                            obj_fssnake.lifespan = 30;        //kill any snakes in the air at this point
                            obj_fssnake.speed = 2.0;
                            obj_fssnake.deceleration = 0.001;
                            //image_angle = point_direction(x, y, coltest.x, coltest.y);
                            //instance_create(coltest.x, coltest.y, debug_spot);
                                for (i= 0; i&lt; random_range(15, 25); i +=1)
                                    {
                                        spawnx = x + random_range(-15, 15);
                                        spawny = y + random_range(-15, 15);
                                        snakeangle = image_angle + random_range(-30,30);                
                                        inst = instance_create(spawnx, spawny, obj_fssnake);                                
                                        with (inst)
                                                {
                                                    image_angle = other.snakeangle;
                                                    homing = true;
                                                    target = other.coltest;
                                                    lifespan = random_range(30,40);
                                                    speed = 1.0;
                                                    deceleration = 0.001;
                                                }                                    
                                    }    
                            
                            
                            if string(hit) == "obj_player"                        
                            {
                                        lifespan = 1;
                                        global.playerHealth -= balldamage;
                                        global.playerdamaged = 20;
                                        global.dirtalpha = 1.0;
                                        global.madness += balldamage;
                                        loc_x = x;
                                        loc_y = y;
                                        damage = balldamage;
                                        script_execute(scr_shipvisualdamage, x, y, loc_x, loc_y, damage);
                                                         
                            }

                        }
                        else
                            {
                                coltest = noone;
                                hit = noone;
                            }
                    }                
    }

//------------------------------  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
