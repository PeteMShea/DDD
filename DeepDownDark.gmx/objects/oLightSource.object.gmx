<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//These are calculated in script - changing them here will do nothing.
cameraSpacePosX = 0.0;
cameraSpacePosY = 0.0;


//Currently sprites appear to be located at z = 0.5. Making the light's z
//position higher will move it towards the camera and away from the object,
//making shadows shorter, falloff less dramatic, etc.
zPosition = 0.7;

//Simply the colour of the light. Reduce all three to make the light less
//bright.
baseLightlevel = 0.8;
colourRed = baseLightlevel;
colourGreen = baseLightlevel;
colourBlue = baseLightlevel;

swoop = false;
swoopdistancemax = 20;
swoopdistance = 0;
swoopdirection =1 ;     //downwards
damage = 0;
yellow = false;
yellowlighttime = 20; //number of frames to fade yellow up and down over when gold collected
yellowcounter = 0;     //counter for turning light yellow
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if just collected a gold pickup and if so colour light yellow

if yellow == true &amp;&amp; yellowcounter &lt;= 0
    {
        yellowcounter = yellowlighttime;
        leveladjust = (1.0 - baseLightlevel)/yellowcounter
        yellow = false;
        leveldir = 1;
    }
    
if yellowcounter &gt; 0
    {
        if yellowcounter &lt;= yellowlighttime/2 leveldir = -1;    
        colourRed += leveladjust * leveldir
        colourGreen += leveladjust * leveldir
        colourBlue -= leveladjust*2 * leveldir
        yellowcounter -= 1;
       
        //show_debug_message(string(colourRed) + ", " + string(colourGreen) + ", " + string(colourBlue) + ", " + string(yellowcounter));
    }
else
    {
        colourRed = baseLightlevel;
        colourGreen = baseLightlevel;
        colourBlue = baseLightlevel;
    
    }


// check if repairing the ship and if so swoop over it
if swoop == false
    {
        x = obj_player.x + 12;
        y = obj_player.y - 20;
    }
if swoop == true
{


//    if swoopspeed &lt; swoopspeedmax &amp;&amp; swoopdistance &lt; swoopdistancemax swoopspeed += swoopacceleration                    
//    if swoopspeed &lt; swoopspeedmax &amp;&amp; swoopdistance &lt; swoopdistancemax *0.9  swoopspeed -= swoopacceleration
               
                
        if swoopdistance = swoopdistancemax &amp;&amp; swoopdirection == 1
        {
            swoopdistance = 0;
            swoopdirection = -1;
       
        } 
        
//    x -= swoopspeed * swoopdirection;
    zPosition -= 0.005 * swoopdirection;
    colourRed += 0.01 * swoopdirection;
    colourGreen += 0.01 * swoopdirection;
    colourBlue += 0.01 * swoopdirection;   
    swoopdistance +=1

     
    if swoopdirection == -1 &amp;&amp; swoopdistance == swoopdistancemax
    {
        swoop = false;
        swoopdistance = 0;
        swoopdirection = 1;
        zPosition = 0.7;        
    }  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//In shader code, the vertex position appears to be in camera space. So it only has
//to happen once per light, rather than once per object, we'll fix this by
//calculating the light's position in camera space.

//Note - for the moment, I'm not going to handle rotating views, but
//adding that later shouldn't be super challenging.

//The first part of that takes the current view's extremes.
leftExtreme = view_xview[view_current];
upperExtreme = view_yview[view_current];
rightExtreme = leftExtreme + view_wview[view_current];
lowerExtreme = upperExtreme + view_hview[view_current];

cameraSpacePosX = x - leftExtreme;
cameraSpacePosY = (y - lowerExtreme) * -1;

cameraSpacePosX /= view_wview[view_current];
cameraSpacePosY /= view_hview[view_current];

cameraSpacePosX = cameraSpacePosX * 2.0 - 1.0;
cameraSpacePosY = cameraSpacePosY * 2.0 - 1.0;

//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
