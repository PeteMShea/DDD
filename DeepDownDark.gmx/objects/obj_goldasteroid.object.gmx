<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_goldasteroid</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_asteroid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise
deceleration = 3;
terminalvelocity = 0.5;
rotdecay = 0.95;
minrotation = 0.5; 
massmult = 0.5;     //how much of player speed is transferred to asteroid on collision
damagemult = 50;     //how much player speed is transferred into damage amount on collision
asteroidhealth = irandom_range(20,40); 
gold = irandom_range(7,14);      //how many pieces of gold in asteroid 
nugget = false;
wreck = false;
blackbox = false;
counter = 120;

image_speed = 0;
asteroidimage = irandom_range(0,4);
image_index = asteroidimage;
image_angle = irandom(360);

speed_x = 0;
speed_y = 0;
rotspeed = 0;
hitcounter = 0;
asteroidhit = 0;
hit_x = 0;
hit_y = 0;
hitspeed_x = 0;
hitspeed_y = 0;


lit = false;

if lit == true
{

/////////////////////////////////////////////////////////////////////////////
// Lighting Setup
//This script goes on the 'create' event of objects that need Sprite Lamp's
//lighting effects.
//The uniform variable stuff shouldn't really change, but down the bottom are
//the bits where you set your desired values for stuff.


/********************************************************************************/
//A whole bunch of shader variables - the 'u_' prefix means 'uniform variable'.
//These are just hooks to communicate with the shader.

//Maps. Note that we don't have to do the diffuse map - that's included as the
//base texture (gm_BaseTexture) automatically.
u_NormalDepthMap = shader_get_sampler_index(SpriteLampShader, "sl_NormalDepthMap");
u_SpecGlossMap = shader_get_sampler_index(SpriteLampShader, "sl_SpecGlossMap");
u_AOMap = shader_get_sampler_index(SpriteLampShader, "sl_AOMap");
u_EmissiveMap = shader_get_sampler_index(SpriteLampShader, "sl_EmissiveMap");

//Sprite Lamp variables that are handled by scripts
u_LightPos = shader_get_uniform(SpriteLampShader, "sl_LightPos");
u_SpriteAngle = shader_get_uniform(SpriteLampShader, "sl_SpriteAngle");
u_TextureRes = shader_get_uniform(SpriteLampShader, "sl_TextureRes");
u_LightColour = shader_get_uniform(SpriteLampShader, "sl_LightColour");

//Sprite Lamp variables that are set by the user
u_CelLevel = shader_get_uniform(SpriteLampShader, "sl_CelLevel");
u_Shininess = shader_get_uniform(SpriteLampShader, "sl_Shininess");
u_WrapAroundLevel = shader_get_uniform(SpriteLampShader, "sl_WrapAroundLevel");
u_AOStrength = shader_get_uniform(SpriteLampShader, "sl_AOStrength");
u_EmissiveStrength = shader_get_uniform(SpriteLampShader, "sl_EmissiveStrength");
u_AmplifyDepth = shader_get_uniform(SpriteLampShader, "sl_AmplifyDepth");

u_UpperAmbientColour = shader_get_uniform(SpriteLampShader, "sl_UpperAmbientColour");
u_LowerAmbientColour = shader_get_uniform(SpriteLampShader, "sl_LowerAmbientColour");
/********************************************************************************/



/********************************************************************************/
//Set your different maps here! Note that your diffuse map isn't done this way - 
//diffuse comes from whatever image is assigned to the object in the usual fashion.
normalDepthTexture = sprite_get_texture(spr_asteroidnormal, asteroidimage);
//specGlossMap = sprite_get_texture(spr_shipSharkNormal, asteroidimage);
specGlossMap = sprite_get_texture(spr_goldasteroid, asteroidimage);
aoMap = sprite_get_texture(spr_goldasteroid, asteroidimage);
emissiveMap = sprite_get_texture(spr_goldasteroid, asteroidimage);
//(note - this example doesn't have an emissive map so I'm using the diffuse map as
//a dummy and turning the emissive strength variable to zero. Eventually I'll have
//a couple of versions of the shader, so if you're not using certain features you
//done have to screw around with this kind of thing)


//Set shader variables here. Note that they get sent every frame,
//so feel free to change these values in script during play.
celLevel = 0.0;     //0
shininess = 30.0;   //50
wrapAroundLevel = 0.0;
aoStrength = 0.4;       //0.3
emissiveStrength = 0.00;     //0
amplifyDepth = 1.5;     //0.5

//Set texture resolution - needed for self-shadows. Presumably there is some way
//to automate this process - if you know how, tell me!
textureWidth = 512;
textureHeight = 256;


//Ambient colour components.
upperAmbient_Red = 0.2;     //0.1
upperAmbient_Green = 0.2;
upperAmbient_Blue = 0.2;

lowerAmbient_Red = 0.01;     //0.03
lowerAmbient_Green = 0.01;
lowerAmbient_Blue = 0.01;


//The nearest lightsource.
lightSource = instance_nearest(x,y,oLightSourceAsteroid);

//add the light to follow player
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
