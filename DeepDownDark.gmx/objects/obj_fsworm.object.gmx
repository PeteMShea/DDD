<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fswormA</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = irandom_range(0 ,7);
animspeed = random_range(0.14, 0.18);
image_speed = animspeed;
direction = image_angle;
speed = random_range(2.8, 3.2);
//speed = 0.2;
acceleration = 0.1;

scale = 0.4     //starting size
scaleinc = 0.1;
image_xscale = scale;
image_yscale = scale;

swerveangle = 1.5;  //degrees which worm turns towards the central column if outside of it

//central column extents for worms
columnx1 = obj_formless.x - 25 - random(4);
columnx2 = obj_formless.x + 25 + random(4);
insidecolumn = false;
straight = false;

collisioncounter = 45; //how often to check for collisions with ground
hitground = false;
timetofade = 5;        //number of frames on ground before starting to fade
startfade = false;
alphafade = 0.1;
fanangle = random_range(-30, 30);   //how much worms fan out when hitting ground (set to zero for launch worms)
hitplayer = false;
damage = 1;     //damage to player on impact

once = false;

lifespan = 300;







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if once == false        //this has to happen here as image_angle has not quite been defined on create 
    {
        once = true;
        startangle = obj_formless.image_angle + 270;       //'downwards' from the spawn        
        grounddirection = startangle + fanangle;
        timetofade += abs(fanangle)*2;        //add time based upon how far out fan angle on land is
    }

lifespan -= 1;
if lifespan &lt;= 0 &amp;&amp; hitground == false hitground = true;      // this is only used by the worms spawned during launch sequence    
    
if scale &lt; 1        //scale up on spawn
    {
        image_xscale = scale;
        image_yscale = scale;
        scale += scaleinc;    
    }

//move the worm forwards until it reaches the ground
//if speed &lt; maxspeed speed += acceleration

direction = image_angle;    //face forwards
//deltaSpeed(speed);

if hitground == false
    {
    //if outside the central column- head towards it
    if x &gt;= columnx1 &amp;&amp; x &lt;= columnx2   //inside the column- straighten up to vertical again
        {
            insidecolumn = true;
        }
    if insidecolumn == true &amp;&amp; straight == false
        {
            angle = round(image_angle);
            if straight == false &amp;&amp; angle &lt; startangle - 1
                    {
                        image_angle += swerveangle;
                    }
            if straight == false &amp;&amp; angle &gt; startangle + 1
                    {
                        image_angle -= swerveangle;
                    }
            if angle &gt;= startangle -1 &amp;&amp; angle &lt;= startangle - 1 straight = true
        } 
    if insidecolumn == false
        {
            if x &lt; columnx1 image_angle += swerveangle * 60 * delta_time/1000000;
            if x &gt; columnx2 image_angle -= swerveangle * 60 * delta_time/1000000;
        }
           
    collisioncounter -= 1;
    
    if collisioncounter * 60 * delta_time/1000000 &lt; 0
        {
            collisioncounter = 45;
            if instance_place(x, y + 100, obj_newblock)     //check ahead of the worm so it begins slow and fan out ahead of reaching it
            {
                hitground = true;
                speed = speed * 0.5;        //slow down
                swerveangle = 2;            
            }
        }
        
    if hitplayer == false
        {
            disttoplayer = distance_to_object(obj_player);
            if disttoplayer &lt; 30
            {
                hitground = true;
                grounddirection = point_direction(x, y, obj_player.x, obj_player.y);            
            }            
        }        
        
        
}
if hitground = true &amp;&amp; startfade == false
    {
        if image_angle &lt; grounddirection - 1 image_angle += swerveangle * 60 * delta_time/1000000;
        if image_angle &gt; grounddirection + 1 image_angle -= swerveangle * 60 * delta_time/1000000;        
        timetofade -= 1 * 60 * delta_time /1000000;
        if timetofade &lt;= 0 startfade = true
        disttoplayer = distance_to_point(obj_player.x, obj_player.y);
        if disttoplayer &lt; 20 &amp;&amp; hitplayer == false
                {
                    hitplayer = true;
                    global.playerHealth -= damage;
                    global.playerdamaged = 20;
                    global.madness += damage;
                    loc_x = x;
                    loc_y = y;
                    damage = 10;
                    script_execute(scr_shipvisualdamage, x, y, loc_x, loc_y, damage);    
                }            
    }

if startfade == true
    {
        if image_alpha &gt; 0 image_alpha -= alphafade * 60 * delta_time /1000000;
        if image_alpha &lt;= 0 instance_destroy();
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
