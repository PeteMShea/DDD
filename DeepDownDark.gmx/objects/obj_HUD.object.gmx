<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialise variables

instance_activate_region(view_xview[0]-64 * global.RM, view_yview[0]-64 * global.RM, view_wview[0]+128 * global.RM, view_hview[0]+128 * global.RM, true);

alarm_set(0, 15);

c_gold = make_colour_rgb(255,204,0);

healthtextright = 50 * global.RM;
HUDtextY = 10 * global.RM;
goldtextleft = view_wview[0]-150 * global.RM;
drawicon = obj_HUDHealth100;
HealthHundreds = 0;
HealthTens = 0;
HealthDigits = 0;
redhealthreshold = 0.3;        //% of health remaining before meter turns red
healthred = false;
HUDAlpha = 0.7;
digitleading = 28;     //how much leading to allow for each numerical digit (in gold counter)
healthold = global.startHealth; //stores last value of health before any change
alphadecay = 0.025;     //how quickly alpha meter fades
drawold = 0;        //counter for decaying meter persisting
fadealphalevel = 0;
goldold = global.playerGold;
alphapulse = 0.02;
golddrawpulse = 0;
goldalphalevel = HUDAlpha;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tt = alarm_get(0)
if tt &lt;= 0
{
// instance deactivation
  //instance_activate_all();

  instance_deactivate_region(view_xview[0],view_yview[0], view_wview[0],view_hview[0],false,true);
  instance_activate_region(view_xview[0]-64, view_yview[0]-64, view_wview[0]+128, view_hview[0]+128, true);
  
                        
alarm_set(0, 15);
//show_debug_message("Ping");
                        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// parallax background control

background_x[0] = view_xview[0];
background_y[0] = view_yview[0];

background_x[1] = view_xview[0]/1.85;
background_y[1] = view_yview[0]/1.10;       //1.1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw HUD elements
draw_set_font(fnt_HUD);
draw_set_halign(fa_right);
draw_set_alpha(HUDAlpha);

// Player Health
hudhealth = string_format(global.playerHealth, 3, 0)
global.playerHealth = floor(global.playerHealth);
if global.playerHealth &lt; 0 global.playerHealth = 0;


if global.playerHealth &lt; (global.startHealth * redhealthreshold)
    {
        draw_set_colour(c_red);
        healthred = true;
    }
else
    {
            draw_set_colour(c_lime);
            healthred = false;
    }
    
draw_text(healthtextright, HUDtextY, hudhealth);
draw_set_alpha(0.1);
draw_text(healthtextright-2, HUDtextY-2, hudhealth);
draw_set_alpha(HUDAlpha);
draw_set_halign(fa_left);

//Now draw the meter
HealthHundreds = floor(global.playerHealth / 100);
HealthTens = floor((global.playerHealth-HealthHundreds*100) / 10);
HealthDigits = global.playerHealth - (HealthHundreds * 100) - (HealthTens * 10);


    //show_debug_message(string(HealthHundreds) + ", " + string(HealthTens) + ", " + string(HealthDigits))
    
draw_x = healthtextright - 2;   //leading from text to start of icons

if HealthHundreds == 1 &amp;&amp; HealthTens = 0 
    {
        HealthHundreds = 0
        HealthTens = 10
    }

//if drawold == 0 alphalevel = HUDAlpha else alphalevel = HUDAlpha - fadealphalevel;

draw_set_alpha(HUDAlpha); 

if ceil(HealthHundreds /2 ) == (HealthHundreds /2) drawicon = spr_HUDHealth100Top else drawicon = spr_HUDHealth100Bottom

if HealthHundreds &gt; 0
    {
        for(i=0; i &lt; HealthHundreds; i +=1)
            {
                draw_sprite(drawicon, 0, draw_x, HUDtextY);
                //instance_create(draw_x, HUDtextY, obj_HUDHealth100Bottom);
                if drawicon == spr_HUDHealth100Top drawicon = spr_HUDHealth100Bottom else drawicon = spr_HUDHealth100Top              

                draw_x += 15;       // leading between hundred triangles
            }
    
    }

if HealthTens &gt; 0
    {
        for(i=0; i &lt; HealthTens; i +=1)
            {        
                if healthred = false draw_sprite(spr_HUDHealth100, 9, draw_x, HUDtextY) else draw_sprite(spr_HUDHealth100Red, 9, draw_x, HUDtextY)
                draw_x += 14;       // leading
            }           
    }

if HealthDigits &gt; 0
    {
             if healthred = false draw_sprite(spr_HUDHealth100, HealthDigits -1 , draw_x, HUDtextY) else draw_sprite(spr_HUDHealth100Red, HealthDigits -1 , draw_x, HUDtextY);    
    
    }

    
// now draw old meter and fade to zero alpha
if healthold &gt; global.playerHealth &amp;&amp; drawold == 0
    {
        drawold = HUDAlpha/alphadecay;
        fadealphalevel = HUDAlpha;
    }


if drawold &gt; 0
    {    
        OldHealthHundreds = floor(healthold / 100);
        HealthTens = floor((healthold-OldHealthHundreds*100) / 10);
        HealthDigits = healthold - (OldHealthHundreds * 100) - (HealthTens * 10);
        //show_debug_message(string(OldHealthHundreds) + ", " + string(HealthTens) + ", " + string(HealthDigits) + ", " + string(drawold))
    
        draw_x = healthtextright - 2;   //leading from text to start of icons

        if OldHealthHundreds == 1 &amp;&amp; HealthTens = 0 
            {
                OldHealthHundreds = 0
                HealthTens = 10
                }        
        draw_set_alpha(fadealphalevel); 
                 
        if ceil(OldHealthHundreds /2 ) == (OldHealthHundreds /2) drawicon = spr_HUDHealth100Top else drawicon = spr_HUDHealth100Bottom
            
                if HealthHundreds &gt; 0 &amp;&amp; OldHealthHundreds == HealthHundreds
                {
                    for(i=0; i &lt; HealthHundreds; i +=1)
                        {
                            draw_sprite(drawicon, 0, draw_x, HUDtextY);
                            //instance_create(draw_x, HUDtextY, obj_HUDHealth100Bottom);
                            if drawicon == spr_HUDHealth100Top drawicon = spr_HUDHealth100Bottom else drawicon = spr_HUDHealth100Top              
            
                            draw_x += 15;       // leading between hundred triangles
                        }
                
                }
            
                if HealthTens &gt; 0 &amp;&amp; OldHealthHundreds == HealthHundreds
                {
                    for(i=0; i &lt; HealthTens; i +=1)
                        {        
                            if healthred = false draw_sprite(spr_HUDHealth100, 9, draw_x, HUDtextY) else draw_sprite(spr_HUDHealth100Red, 9, draw_x, HUDtextY)
                            draw_x += 14;       // leading
                        }           
                }
            
                if HealthDigits &gt; 0 &amp;&amp; OldHealthHundreds == HealthHundreds
                {
                         if healthred = false draw_sprite(spr_HUDHealth100, HealthDigits -1 , draw_x, HUDtextY) else draw_sprite(spr_HUDHealth100Red, HealthDigits -1 , draw_x, HUDtextY);    
                
                }
        

                fadealphalevel -= alphadecay
                drawold -=1

    }
if drawold == 0
    {
        healthold = global.playerHealth;
    }
    
draw_set_alpha(HUDAlpha); 
    
    
  
// -------------------------------------------------------------------------------------
//Now the Gold Meter
draw_set_alpha(goldalphalevel);
global.playerGold = floor(global.playerGold);
draw_set_colour(c_gold);
draw_set_halign(fa_right);
draw_x = view_wview[0]-25
draw_text(draw_x, HUDtextY, global.playerGold);
draw_set_alpha(0.1);
draw_text(draw_x+2, HUDtextY-2, global.playerGold);


//Now draw the meter
GoldThousands = floor(global.playerGold / 1000);
GoldHundreds = floor((global.playerGold - GoldThousands * 1000) / 100);

GoldTens = floor((global.playerGold - (GoldThousands * 1000) - (GoldHundreds*100)) / 10);
GoldDigits = global.playerGold - (GoldThousands * 1000) - (GoldHundreds * 100) - (GoldTens * 10);
//show_debug_message(string(GoldThousands) + ", " + string(GoldHundreds) + ", " + string(GoldTens) + ", " + string(GoldDigits))

//leading from text
if GoldThousands &gt; 9 draw_x -= digitleading * 4.75  
if GoldThousands &gt; 1 &amp;&amp; GoldThousands &lt; 10 draw_x -= digitleading * 4.25
if GoldThousands == 1 &amp;&amp; GoldThousands &lt; 9 draw_x -= digitleading * 4.0 
if GoldHundreds &gt; 1 &amp;&amp; GoldThousands == 0 draw_x -= digitleading * 3.4
if GoldHundreds == 1 &amp;&amp; GoldThousands == 0 draw_x -= digitleading * 3.2
if GoldHundreds == 0 &amp;&amp; GoldThousands == 0 &amp;&amp; GoldTens != 1 draw_x -= digitleading * 2.7  
if GoldHundreds == 0 &amp;&amp; GoldThousands == 0 &amp;&amp; GoldTens == 1 draw_x -= digitleading * 2.3  

if ceil(GoldHundreds /2 ) == (GoldHundreds /2) drawicon = spr_HUDGold1KTop else drawicon = spr_HUDGold1KBottom


if goldold &lt; global.playerGold &amp;&amp; golddrawpulse == 0
    {
        golddrawpulse = 30;
        alphadir = 1;
    }
if golddrawpulse &gt; 0
    {
        if goldalphalevel == 1.0 alphadir = -1 
        goldalphalevel += alphapulse * alphadir
        golddrawpulse -= 1;
        //show_debug_message(string(goldalphalevel)); 
    }
else
    {
     goldalphalevel = HUDAlpha
    }
    
draw_set_alpha(goldalphalevel);

if GoldThousands &gt; 0
    {
        for(i=0; i &lt; GoldThousands; i +=1)
            {    
                draw_sprite(spr_HUDGold10K, 0, draw_x, HUDtextY);
                draw_x -= 25;       // leading between thousand icons
            }
    }


if GoldHundreds &gt; 0
    {
        draw_x += 4;    //less leading between a thousand and a hundred
        for(i=0; i &lt; GoldHundreds; i +=1)
            {
                draw_sprite(drawicon, 0, draw_x, HUDtextY);
                //instance_create(draw_x, HUDtextY, obj_HUDHealth100Bottom);
                if drawicon == spr_HUDGold1KTop drawicon = spr_HUDGold1KBottom else drawicon = spr_HUDGold1KTop              
                draw_x -= 15;       // leading between hundred triangles
            }
    
    }

if GoldTens &gt; 0
    {
        for(i=0; i &lt; GoldTens; i +=1)
            {        
                draw_sprite(spr_HUDGold100, 9, draw_x, HUDtextY);
                draw_x -= 14;       // leading
            }           
    }

if GoldDigits &gt; 0
    {
             draw_sprite(spr_HUDGold100, GoldDigits -1 , draw_x, HUDtextY);    
    
    }

goldold = global.playerGold;


// reset Alpha
draw_set_alpha(1.0);




//Now frame counter
draw_set_font(fnt_CapsullaTitle);
draw_text(healthtextright, 42, "FPS = " + string(fps));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
