<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spike</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>25</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// initialise
acceleration = 0.2;       //acceleration
maxspeed = 5;
speedmult = 0;
damage = 10;     //damage to player
asteroidhealth = 10;
gold = 0;

speed_x = 0;
speed_y = 0;


fire = false;
fired = false;
scale = 0.1;
scaleinc = 0.1;

hitplayer = false;
hit = false;
persisttime = 300;      //how long a stuck spike lives for before fading
fade = false;
alphafade = 0.1;
image_alpha = 1.0;


hitangle = 0;
hitdistance = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hitplayer == true    //move with the player while stuck- done in end step so player has already updated
    {
        hitangle = obj_player.image_angle + adjustangle;   
        hx = obj_player.x + lengthdir_x(hitdistance, hitangle);
        hy = obj_player.y + lengthdir_y(hitdistance, hitangle);
        //instance_create(hx, hy, obj_debug);
        image_angle = hitangle - hitadjustangle + 180;
        x = hx; //+ lengthdir_x(70, image_angle + 180);
        y = hy; //+ lengthdir_y(70, image_angle + 180); 
        
        //check for collsion with env. after stuck
        if place_meeting(x, y, obj_block) persisttime = 0;                   
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// scale up on spawn
if scale &lt; 1
    {
        scale += scaleinc;
        image_xscale = scale;
        image_yscale = scale;
    }

if fire == true &amp;&amp; fired == false
    {
        //calculate aim
        aimx = x + lengthdir_x(500, image_angle);
        aimy = y + lengthdir_y(500, image_angle);
        vx = (aimx - x);
        vy = (aimy - y);
                
        val = sqr(vx) + sqr(vy);    
        if val &gt; 0 len = sqrt(val) else len = 0
                 
        if len != 0
            {   
                vx = vx / len;
                vy = vy / len;
            }
        fired = true;   
    }

//collision detection
if fired == true &amp;&amp; hit == false
{
    hx = x + (vx * speedmult); // + lengthdir_x(70, image_angle) + (vx * speedmult);
    hy = y + (vy * speedmult); // + lengthdir_y(70, image_angle) + (vy * speedmult);

    if collision_point(hx, hy, obj_player, true, true)
        {        
            instance_create(hx, hy, obj_debug);
            hit = true;
            angle = image_angle;            
            strikeangle = point_direction(obj_player.x, obj_player.y, hx, hy);
            adjustangle = strikeangle - obj_player.image_angle;
            hitadjustangle = strikeangle - (image_angle + 180);
            hitdistance = point_distance(obj_player.x, obj_player.y, hx, hy);         
            global.playerHealth -= damage;
            loc_x = hx;
            loc_y = hy;
            script_execute(scr_shipvisualdamage, loc_x, loc_y);
            
            hitplayer = true;
        }
    else if collision_point(hx, hy, obj_block, false, true)
        {
            bx = hx;
            by = hy;  
    
            script_execute(scr_blockburstvfx, bx, by);
            hit = true;        
        }
}

//movement
if fired == true &amp;&amp; hit == false
{
    if speedmult &lt; maxspeed speedmult += acceleration    
    x += vx * speedmult 
    y += vy * speedmult
}

//collision reactions

if hit == true
    {
        speedmult = 0;
        persisttime -= 1;       //hang around then fade away
        if persisttime &lt;= 0 &amp;&amp; fade == false
            {
                for(i = 0; i &lt; 8; i += 1)
                    {
                        bx = x + lengthdir_x(10 * i, image_angle);
                        by = y + lengthdir_y(10 * i, image_angle);
                        script_execute(scr_particleburst, bx, by)
                    }
                fade = true;     
            }
        
        if fade == true
        {
                image_alpha -= alphafade;
                if image_alpha &lt;= 0 instance_destroy();           
        
        }
    }



    
    
    
    
    
    
    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
