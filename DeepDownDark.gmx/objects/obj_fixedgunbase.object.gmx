<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fixedgunbase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>30</depth>
  <persistent>0</persistent>
  <parentName>obj_block</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise

image_speed = 0;
maxhealth = 12;
currenthealth = maxhealth;

firerange = 200;
shoot_counter = 0;
shoot_rate = 30;     //number of frames between bullets
shoot_delay = 60;       //time between bursts
max_burst = 5;       //how many bullets to fire in a burst
delaycount = 0;
burstcount = 0; 

dead = 0;
cullcount = 90;    //time in frames before a destroyed enemy is removed

//with (instance_create(x, y, obj_fixedgun))
//    {
        //image_angle = gun_angle;

//    }
    
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// fire at player

//first check if within range and 90 degree viewing angle
seen = false;
playerdist = distance_to_object(obj_player);
if playerdist &lt;= firerange
    {
        var x1, y1, x2, y2; 
         x1 = lengthdir_x(1, image_angle); 
         y1 = lengthdir_y(1, image_angle); 
         x2 = obj_player.x - x; 
         y2 = obj_player.y - y; 
         if dot_product(x1, y1, x2, y2) &gt;= 45 seen=true else seen=false;           // within 45 degree arc of sight
         //show_debug_message(string(dot_product(x1, y1, x2, y2)));
        
    }


if currenthealth &gt;= maxhealth * 0.1 &amp;&amp; seen == true
    {
    
    if delaycount &gt;= shoot_delay
        {      
               if burstcount &lt;= max_burst
                    {   
                 
                            
                            // shoot counter limits fire rate
                            if shoot_counter &lt;= 0 
                                {
                            
                                    var inst;
                                    inst = instance_create(x + lengthdir_x(2, image_angle), y+ lengthdir_y(2, image_angle), obj_enemybullet);
                                    with (inst)
                                    {
                                        destx = obj_player.x;
                                        desty = obj_player.y;
                                    }         
                                    shoot_counter = shoot_rate;
                                    burstcount += 1;       
                                }    
                               
                            //delaycount = 0;
                            //burstcount = 0;
                }
        }
        else delaycount += 1
        
        
        //show_debug_message("delaycount" + string(delaycount) + " ,burstcount " + string(burstcount) + ",shootcount " + string(shoot_counter));
            
    }
              
                
                               
        if burstcount &gt; max_burst
        {
            burstcount = 0;
            delaycount = 0;
        }
        
        if shoot_counter &gt;0
        {    
            shoot_counter -= 1;
        }
        

// damage or destroy enemy

if currenthealth &lt; maxhealth &amp;&amp; currenthealth &gt;= maxhealth*0.75
    {
        image_index = 1;
    }

if currenthealth &lt; maxhealth * 0.75 &amp;&amp; currenthealth &gt;= maxhealth*0.5
    {
        image_index = 2;
    }

if currenthealth &lt; maxhealth * 0.5 &amp;&amp; currenthealth &gt;= maxhealth*0.25
    {
        image_index = 3;
    }

if currenthealth &lt;= 0 &amp;&amp; dead == 0
    {
        effect_create_above(ef_explosion, x, y, 0.05, c_lime);
        bx = x;
        by = y;
        script_execute(scr_spawngoldburst, bx, by);
        image_index = 4;
        dead = 1;
    }

if dead == 1 cullcount -= 1;

if cullcount &lt;=0
    {
        bx = x;
        by = y;
        script_execute(scr_blockburstvfx, bx, by);
        instance_destroy();
    }





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
