<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grabber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise


image_speed = 0;    //animated with timeline

rotspeed = 2;

grabbing = false;
awake = false;
wakeuprange = 700;
asleeprange = 900;
nodemindistance = 200;      //minimum travel distance between nodes
nodemaxdistance = 480;
nodefound = false;
aimx = x;
aimy = y;
target_angle = image_angle;
moving = false;



attacking = false;


// find all the nodes and store in an array
totalnodes = instance_number(obj_enemynode);
var i;
for (i = 1; i &lt;= totalnodes; i += 1)
    {
        enemynode[i] = instance_find(obj_enemynode,i);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// rotate
//if moving == false
//    {
        angledif = angle_difference(image_angle, target_angle);
        if angledif &gt; 2
            {
                image_angle -= rotspeed;
            }
        if angledif &lt; -2
            {
                image_angle += rotspeed;
            }
        //else image_angle = target_angle;
//    }

dist = distance_to_point(obj_player.x, obj_player.y);

if grabbing == false
    {
        timeline_index = tm_grabberidle;
        timeline_running = true;
        timeline_loop = true;
    }

if awake == false
    {        
        if dist &lt;= wakeuprange
            {
                awake = true;
                show_debug_message("Grabber awake!");   
            }
    }

if awake == true
{
/*
        if dist &gt;= asleeprange
        {
            awake = false;
            timeline_index = tm_grabberidle;
            timeline_running = true;
            timeline_loop = true;                    
        }
*/
if grabbing == true &amp;&amp; attacking == false         //grabbing is set in the timeline
{
    
    if nodefound == false
        {
            // pick a new node to travel to
            nodefound = false;
            while(nodefound == false)
                {
                    randomid = irandom_range(1, totalnodes) 
                    nodeid = enemynode[randomid];                    
                    nodedist = point_distance(x, y, nodeid.x, nodeid.y);
                    if nodedist &gt;= nodemindistance &amp;&amp; nodedist &lt; nodemaxdistance
                        {
                            aimx = nodeid.x;
                            aimy = nodeid.y;
                            nodefound = true;
                            target_angle = point_direction(x, y, aimx, aimy);                            
                            show_debug_message("New node found at: " + string(aimx) + " , " + string(aimy) + " angle: " + string(target_angle));
                            instance_create(aimx, aimy, obj_debug);                              
                        }
                }
        }
    if nodefound == true
        {
            if moving == false      //first turn towards aim point
                {                    
                    anglealign = abs(angle_difference(target_angle, image_angle));
                    show_debug_message(string(anglealign));       
                    if anglealign &lt;= 3 moving = true;                               
                }
            
            if moving == true
                {
                    //calculate how many animation frames to play
                    
                    grabdistance = nodedist - 170;
                    totalframes = ceil(grabdistance / 18) + 15;
                    totalframes = clamp(totalframes, 15, 31);
                    show_debug_message("Now grabbing, totalframes = " + string(totalframes) + " nodedist: " + string(nodedist));
                    timeline_index = tm_grabbermove;                    
                    timeline_loop = false;                                        
                    if image_index &lt; totalframes timeline_running = true
                    if image_index &gt;= totalframes
                        {
                            timeline_running = false;                                                
                        }
                
                
                
                
                }
        }
    
    
}




}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
