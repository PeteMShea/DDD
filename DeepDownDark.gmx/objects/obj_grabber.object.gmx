<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grabber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// initialise


image_speed = 0;    //animated with timeline

rotspeed = 3;

grabbing = false;
awake = false;
wakeuprange = 900;
asleeprange = 1900;
nodemindistance = 170;      //minimum travel distance between nodes
nodemaxdistance = 480;
nodefound = false;
aimx = x;
aimy = y;
target_angle = image_angle;
moving = false;
dragging = false;
reached = false;
maxspeed = 10.0;
movespeed = 0;
acceleration = 1.0;
grabproximity = 64;     //distance from node before grabber stops moving and completes grab

readytofire = false;
firepause = 60;     //pause before firing
firespeed = 10.0;        //force multiplier for firing asteroids at player
fired = false;
attacking = false;


// find all the nodes and store in an array
totalnodes = instance_number(obj_enemynode);
var i;
for (i = 1; i &lt;= totalnodes; i += 1)
    {
        enemynode[i] = instance_find(obj_enemynode,i);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// rotate

        angledif = angle_difference(image_angle, target_angle);
        if angledif &gt; 2
            {
                image_angle -= rotspeed;
            }
        if angledif &lt; -2
            {
                image_angle += rotspeed;
            }


dist = point_distance(x, y, obj_player.x, obj_player.y);

if grabbing == false
    {
        timeline_index = tm_grabberidle;
        timeline_running = true;
        timeline_loop = true;
    }

if awake == false
    {        
        if dist &lt;= wakeuprange
            {
                awake = true;
                show_debug_message("Grabber awake!");   
            }
    }

if awake == true
{

        if dist &gt;= asleeprange &amp;&amp; moving == false
        {
            awake = false;
            timeline_index = tm_grabberidle;
            timeline_running = true;
            timeline_loop = true;                    
        }

if grabbing == true &amp;&amp; attacking == false         //grabbing is set in the timeline
{
    
    if nodefound == false
        {
            // pick a new node to travel to
            nodefound = false;
            while(nodefound == false)
                {
                    randomid = irandom_range(1, totalnodes) 
                    nodeid = enemynode[randomid];                    
                    nodedist = point_distance(x, y, nodeid.x, nodeid.y);
                    if nodedist &gt;= nodemindistance &amp;&amp; nodedist &lt; nodemaxdistance
                        {
                            aimx = nodeid.x;
                            aimy = nodeid.y;
                            nodefound = true;
                            target_angle = point_direction(x, y, aimx, aimy);                            
                            //show_debug_message("New node found at: " + string(aimx) + " , " + string(aimy) + " angle: " + string(target_angle));
                            //instance_create(aimx, aimy, obj_debug);                              
                        }
                }
        }
    if nodefound == true
        {
            if moving == false      //first turn towards aim point
                {                    
                    anglealign = abs(angle_difference(target_angle, image_angle));
                    show_debug_message(string(anglealign));       
                    if anglealign &lt;= 3 moving = true;                               
                }
            
            if moving == true &amp;&amp; dragging == false
                {
                    //calculate how many animation frames to play
                    
                    grabdistance = nodedist - 170;
                    totalframes = ceil(grabdistance / 18) + 15;
                    totalframes = clamp(totalframes, 15, 31);
                    //show_debug_message("Now grabbing, totalframes = " + string(totalframes) + " nodedist: " + string(nodedist));
                    timeline_index = tm_grabbermove;                    
                    timeline_loop = false;                                        
                    if image_index &lt; totalframes timeline_running = true
                    if image_index &gt;= totalframes
                        {
                            timeline_running = false;
                            //timeline_loop = true;
                            //curpos = timeline_position;
                            image_speed = -0.6;                                                        
                            dragging = true;
                            locx = aimx;
                            locy = aimy;
                            script_execute(scr_grabberrocks, locx, locy);                                                                            
                        }
                }
            if dragging == true &amp;&amp; reached == false         //move towards aim point
                {
                    //timeline_index = tm_grabbermove;                                    
                    //timeline_running = true;
                    //timeline_loop = false;
                    if image_index &lt;= 14
                        {
                            obj_grabberblock.homing = true;
                      
                        }
                    if movespeed &lt; maxspeed movespeed += acceleration;
                    vx = (aimx - x);
                    vy = (aimy - y);

                    val = sqr(vx) + sqr(vy);    
                    if val &gt; 0 len = sqrt(val) else len = 0
 
                    if len != 0
                        {   
                            vx = vx / len;
                            vy = vy / len;
                        }
                    
                    x += vx * movespeed
                    y += vy * movespeed
                    
                    movedist = point_distance(x, y, aimx, aimy);
                        if movedist &lt; grabproximity
                        {
                            movespeed = 0;
                            image_speed = 0;
                            reached = true;
                            reverseangle = nodeid.image_angle + 180;    //back off in opposite direction of node facing
                            aimx = x + lengthdir_x(100, reverseangle);
                            aimy = y + lengthdir_y(100, reverseangle);
                            movespeed = 1.0;                            
                            timeline_index = tm_grabberidle;
                            timeline_running = true;
                            timeline_loop = true;                                                     
                        }
                }
            if reached == true &amp;&amp; readytofire == false          //now back away a bit
                {
                    inst = instance_create(x + random_range(-16, 16), y + random_range(-16, 16), obj_grabberblock);
                    with(inst)
                        {
                            target = other.id;
                            homing = true;
                            speed = 6.0;
                        }
                        
                    target_angle = point_direction(x, y, obj_player.x, obj_player.y);       //aim at player                    
                    vx = (aimx - x);
                    vy = (aimy - y);

                    val = sqr(vx) + sqr(vy);    
                    if val &gt; 0 len = sqrt(val) else len = 0
 
                    if len != 0
                        {   
                            vx = vx / len;
                            vy = vy / len;
                        }
                    
                    x += vx * movespeed
                    y += vy * movespeed
                    
                    movedist = point_distance(x, y, aimx, aimy);
                        if movedist &lt; 3
                            {
                                movespeed = 0;
                                readytofire = true;
                                inst = instance_create(x, y, obj_grabberasteroid);
                                with(obj_grabberblock)
                                    {
                                        //lifespan = 60;
                                        target = other.inst;
                                        speed = slowspeed;                                    
                                    }                         
                            }                    
                
                }
            if readytofire = true &amp;&amp; fired == false
                {
                    target_angle = point_direction(x, y, obj_player.x, obj_player.y);       //aim at player  
                    firepause -= 1;
                    if firepause &lt;= 0
                        {                    
                            timeline_index = tm_grabberfire;
                            timeline_position = 0;
                            timeline_running = true;
                            timeline_loop = false;
                            reverseangle = image_angle + 180;               //fire asteroid by applying a hit force to opposite side
                            hitx = x + lengthdir_x(32, reverseangle);
                            hity = y + lengthdir_y(32, reverseangle);
                            extx = x + lengthdir_x(48, reverseangle);
                            exty = y + lengthdir_y(48, reverseangle);                    
                            inst = instance_nearest(x, y, obj_grabberasteroid);                     
                            hvx = (inst.x- hitx);
                            hvy = (inst.y - hity);
                            val = sqr(hvx) + sqr(hvy);    
                            if val &gt; 0 len = sqrt(val) else len = 0 
                            if len != 0
                                {   
                                    hvx = hvx / len;
                                    hvy = hvy / len;
                                }
                            hvx *= firespeed;
                            hvy *= firespeed;                    
                            with(inst)
                                {
                                    asteroidhit = 3;
                                    hit_x = other.hitx;
                                    hit_y = other.hity;
                                    hitspeed_x = other.hvx;
                                    hitspeed_y = other.hvy;
                                    ext_x = other.extx;
                                    ext_y = other.exty;                        
                                }                   
                            fired = true;           //asteroid bools are reset in the fire timeline!
                        }                
                }
        }
    
    
}

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
