<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fsmouthdebris</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialise variables

min_speed = 0.2;
deceleration = 0.001;
bouncecount = 0;
debrisdamage = 0;     //how much damage collision with debris does
lifespan = random_range(100, 200);
lifespanfade = 60;     //how many frames fade to alpha happens over
fadealpha = 1.0;


image_speed = 0;
image_index = irandom_range(0,3);

// start moving
angle = random_range(0, 359);
image_angle = angle;
mouthangle = obj_formless.image_angle;
direction = random_range(mouthangle - 20, mouthangle + 20);
speed = random_range(0.4, 1.0) * 60 * delta_time/1000000;
rotation_speed = random_range(-0.5,0.5);

oldspeed = speed;
oldtime = delta_time;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = oldspeed * (delta_time / oldtime);
oldspeed = speed;
oldtime = delta_time;


if hspeed &gt;= min_speed || hspeed &lt;= -min_speed
    {
    
        hspeed -= (sign(hspeed) * deceleration);
    
    }

else
    {
        hspeed = sign(hspeed) * min_speed;
    }


if vspeed &gt;= min_speed || vspeed &lt;= -min_speed
    {
    
        vspeed -= (sign(vspeed) * deceleration);
    
    }
    
else
    {
        vspeed = sign(vspeed) * min_speed;
    }

image_angle += rotation_speed * 60 * delta_time /1000000;

image_alpha = fadealpha;

if lifespan &lt; lifespanfade fadealpha -= 1.0/lifespanfade;      // reduce the alpha over lifespanfade frames

if bouncecount &gt;= 2 || lifespan &lt;=0
   {
        instance_destroy();
    
    }

lifespan -= 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
