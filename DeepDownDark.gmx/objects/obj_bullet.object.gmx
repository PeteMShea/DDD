<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialise variables
image_speed = 0;
bulletspd = 3 * global.RM;
lifespan = 120;     //number of frames bullet will live for
asteroidmult = 0.25;       //how much damage done to asteroid


if obj_player.bulletfire == 0 image_index = 0
if obj_player.bulletfire == 1 image_index = 1
if obj_player.bulletfire == 2 image_index = 2
if obj_player.bulletfire == 3 image_index = 3

if obj_player.bulletfire == 4
    {
        //show_debug_message("R");
        image_index = 4;
        ricochet = true
        lifespan = 240;
    }
else ricochet = false;

if obj_player.bulletfire == 5
    {
        //show_debug_message("P");
        image_index = 5;
        piercing = true
        lifespan = 240;
    }
else piercing = false;

start_x = x;
start_y = y;

bounce = 0;
totalbounces = 3;       //number of permitted bounces before bullet is destroyed

//show_debug_message(string(start_x) + " , " +  string(start_y));



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pause == false
{

//--------------------------------------------------

// Movement

vx = (destx - x);
vy = (desty - y);

val = sqr(vx) + sqr(vy);    
if val &gt; 0 len = sqrt(val) else len = 0
 
if len != 0
{   
vx = vx / len;
vy = vy / len;
}

x -= vx * bulletspd
y -= vy * bulletspd


// remove bullets over time if no collision
lifespan -= 1;
if lifespan &lt;= 0 instance_destroy();


// Collision detection and resolution
collided = false;
inst = noone;
if collided == false inst = instance_place(x, y, obj_blastblock);
if inst != noone
    {
        collided = true;
        //create debris tinyblocks
        bx = x
        by = y

        var ix;
        script_execute(scr_blockburstvfx, bx, by);
        //change state or destroy instance of block hit
        if ricochet == true
        {
            if inst.dir == 0 &amp;&amp; bounce &lt;= 0
            {
            //show_debug_message("Above")
            newbulletangle = (360 - image_angle);
            bounce = 3;
            totalbounces -= 1;
            }
            if inst.dir == 1 &amp;&amp; bounce &lt;= 0
            {
            //show_debug_message("Right")
            newbulletangle = (180 - image_angle);
            bounce = 3;
            totalbounces -= 1;            
            }
            if inst.dir == 2 &amp;&amp; bounce &lt;= 0
            {
            //show_debug_message("Below")
            newbulletangle = (360 - image_angle);
            bounce = 3;
            totalbounces -= 1;            
            }
            if inst.dir == 3 &amp;&amp; bounce &lt;= 0
            {
            //show_debug_message("Left")
            newbulletangle = (180 - image_angle);
            bounce = 3;
            totalbounces -= 1;            
            }
            if bounce == 3
                {
                    image_angle = newbulletangle;
                    destx = x - lengthdir_x(100, newbulletangle);
                    desty = y - lengthdir_y(100, newbulletangle);
                }
            bounce -=1;            
            if totalbounces &lt;= 0 instance_destroy();
          
        }        
        with (inst)
        {
            if hitpoints &gt; 0
                {
                    sprite_index = alt_sprite;
                    image_index = irandom_range(0,5);
                    hitpoints -= obj_player.bulletdamage;
                }
            else
                {
                    instance_destroy();
                }
        }
        
        //destroy the bullet unless ricochet or piercing
            if piercing == false
            {
                bx = x
                by = y        
                script_execute(scr_bulletsparks, bx, by);        
                if ricochet == false instance_destroy();
            }
    }
    
gold = noone;
gold = instance_place(x, y, obj_gold);
if gold != noone
    {
        collided = true;
        instance_create(x, y, obj_goldpickup);
        speed_x = hspeed * 0.75
        speed_y = vspeed * 0.75
        with (gold) instance_destroy();
        bx = x
        by = y
        script_execute(scr_blockburstvfx, bx, by);
        
        //destroy the bullet unless piercing
        if piercing == false
        {        
            bx = x
            by = y        
            script_execute(scr_bulletsparks, bx, by);
            instance_destroy();
        }
    }

    
        
/*
darkspawn = noone;
if collided == false darkspawn = instance_place(x, y, obj_darkspawn);
if darkspawn != noone
    {
        collided = true;
        with(darkspawn) 
            {
                if currenthealth &gt;0
                {
                
                //create debris tinyblocks
                bx = other.x
                by = other.y
                script_execute(scr_blockburstvfx, bx, by);
                
                currenthealth -= obj_player.bulletdamage;                
                }           
            }
        //destroy the bullet unless piercing
        if piercing == false
        {        
            bx = x
            by = y        
            script_execute(scr_bulletsparks, bx, by);
            instance_destroy();
        }
    }    

*/    
    
    
gaunt = noone;
if collided == false gaunt = instance_place(x, y, obj_gaunt);
if gaunt != noone
    {
        collided = true;
        with(gaunt) 
            {
                if currenthealth &gt;0
                {
                
                //create debris tinyblocks
                bx = other.x
                by = other.y
                script_execute(scr_smalldebris, bx, by);
                awake = true;
                currenthealth -= obj_player.bulletdamage;
                if hitanim == 0 hitanim = hitanimmax;
                //show_debug_message(string(currenthealth)); 
                
                }           
            }
        //destroy the bullet unless piercing
        if piercing == false
        {        
            bx = x
            by = y        
            script_execute(scr_bulletsparks, bx, by);
            instance_destroy();
        }

    }     

grabber = noone;
if collided == false grabber = instance_place(x, y, obj_grabber);
if grabber != noone
    {
        collided = true;
        with(grabber) 
            {
                if currenthealth &gt; 0
                    {                
                    awake = true;
                    currenthealth -= obj_player.bulletdamage;                
                    //show_debug_message(string(currenthealth));                 
                    }           
            }
        instance_create(x, y, obj_grabberdebris);
        //destroy the bullet unless piercing
        if piercing == false
        {        
            bx = x
            by = y        
            script_execute(scr_bulletsparks, bx, by);
            instance_destroy();
        }

    }      
    
    
spores = noone;
if collided == false spores = instance_place(x, y, obj_spawn);
if spores != noone
    {
        collided = true;
        with(spores) 
            {
                if currenthealth &gt;0
                {
                
                //create debris tinyblocks
                bx = other.x
                by = other.y
                script_execute(scr_bulletsparks, bx, by);
                awake = true;
                currenthealth -= obj_player.bulletdamage;
                
                }           
            }
// don't destroy the bullet when shooting spores

    }     

formless = noone;
if collided == false formless = instance_place(x, y, obj_fsmouthcollision);
if formless != noone
    {
        collided = true;
        with(obj_formless) 
            {
                if currenthealth &gt;0
                {
                
                //create mouth debris
                bx = other.x
                by = other.y
                script_execute(scr_formlessmouthdebris, bx, by);
                shotinmouth = true;
                currenthealth -= obj_player.bulletdamage;                
                }           
            }
        //destroy the bullet
        instance_destroy();
    }     
    
        
asteroid = noone;
if collided == false asteroid = instance_place(x, y, obj_asteroid);
if asteroid != noone

    {
    collided = true;
    hitangle = point_direction(start_x, start_y, x, y);
    extended_x = x + lengthdir_x(32 * global.RM, hitangle);
    extended_y = y + lengthdir_y(32 * global.RM, hitangle); 
        with(asteroid) 
            {
                asteroidhit = 2;    // 2= hit by bullet
                hit_x = other.x;
                hit_y = other.y;
                //instance_create(hit_x, hit_y, obj_debug);
                ext_x = other.extended_x;
                ext_y = other.extended_y;
                hitspeed_x = other.vx * other.bulletspd * other.asteroidmult * 0.15;
                hitspeed_y = other.vy * other.bulletspd * other.asteroidmult * 0.15;
            }

        //create debris tinyblocks unless a nugget or a wreck
        bx = x;
        by = y;
        loc_x = x;
        loc_y = y;
        if asteroid.nugget == false &amp;&amp; asteroid.wreck == false script_execute(scr_blockburstvfx, bx, by);
        if asteroid.wreck == true script_execute(scr_wreckdebrisvfx, bx, by, loc_x, loc_y);
        //else script_execute(scr_spawngoldburst, bx, by);
        bx = x
        by = y        
        script_execute(scr_bulletsparks, bx, by);
        if ricochet == true
            {
                ax = asteroid.x;
                ay = asteroid.y;
                hx = x;
                hy = y;
                
                asteroid_angle = point_direction(hx, hy, ax, ay);            
                newbulletangle = image_angle + (image_angle - asteroid_angle);
                bounce = 5;          
                if bounce == 5
                    {
                        image_angle = newbulletangle;
                        destx = x - lengthdir_x(100, newbulletangle);
                        desty = y - lengthdir_y(100, newbulletangle);            
                    }
                bounce -=1;                          
            }                                           
        else if piercing == false instance_destroy();
    }         
    

newblock = noone;
if collided == false newblock = instance_place(x, y, obj_newblock);
if newblock != noone
    {
        collided = true;
        bx = x
        by = y        
        script_execute(scr_bulletsparks, bx, by);
        if ricochet == true
        {            
            hx = newblock.x - 2;
            hy = newblock.y - 2;
            hx2 = hx + newblock.sprite_width;
            hy2 = hy + newblock.sprite_height;
                                 
                    if bx &gt; hx2 &amp;&amp; bounce &lt;= 0
                    {
                        //show_debug_message("Right")
                        newbulletangle = (180 - image_angle);
                        bounce = 3;
                        totalbounces -= 1; 
                    }
                    if bx &lt; hx &amp;&amp; bounce &lt;= 0
                    {
                        //show_debug_message("Left")
                        newbulletangle = (180 - image_angle);
                        bounce = 3;
                        totalbounces -= 1;                     
                    }

                    if by &gt; hy2 &amp;&amp; bounce &lt;= 0
                    {
                        //show_debug_message("Below")
                        newbulletangle = (360 - image_angle);
                        bounce = 3;
                        totalbounces -= 1;                         
                    }
                    if by &lt; hy &amp;&amp; bounce &lt;= 0
                    {
                        //show_debug_message("Above")
                        newbulletangle = (360 - image_angle);
                        bounce = 3;
                        totalbounces -= 1;                                         
                    }
                    
                    if bx &gt; hx + 1 &amp;&amp; bx &lt; hx2 - 1 &amp;&amp; by &gt; hy + 1 &amp;&amp; by &lt; hy2 - 1 instance_destroy()       //inside the block- just destroy the bullet
                    

            if bounce == 3
                {
                    image_angle = newbulletangle;
                    destx = x - lengthdir_x(100, newbulletangle);
                    desty = y - lengthdir_y(100, newbulletangle);
                }
            bounce -=1;            
            if totalbounces &lt;= 0 instance_destroy();                
                      
        }
        else instance_destroy();
    }

// Collide with any other environment block- just kill the bullet
block = noone;
if collided == false block = instance_place(x, y, obj_block);
if block != noone
    {
        collided = true;
        bx = x
        by = y        
        script_execute(scr_bulletsparks, bx, by);                        
        instance_destroy();
    
    
    }

    
    
//--------------------------------------------------------------------------    
}    
    
    
    
    
    
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
