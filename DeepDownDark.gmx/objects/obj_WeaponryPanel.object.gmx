<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_WeaponryPanel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.pause = true;

// initialise
xview = view_xview[0];
yview = view_yview[0];

image_alpha = 0;    //start invisible
x = xview + 1313;
y = yview + 58;

bluepanelx = 1290;
bluepanely = 8;



finalalpha = 0.75;
alphafade = 0.04;
fadein = false;
fadeout = false;
fadeDone = false;

appearwait = 15;       //frames until panel appears
panelappeared = false;
overlaysappeared = false;

//item buttons
buttonsappeared = false;        
buttonx = xview + 1345;
buttony = yview + 608;
buttonxoffset = 85;    //distance from one button to next
buttonyoffset = 96;    //vertical distance between rows of buttons

//install/equip button
installx = xview + 1360;      
instally = yview + 465;

weapongraphicx = xview + 1698;
weapongraphicy = yview + 400;

// text consts- uses drawGUI so no view offset!
paleblue = make_colour_rgb(207, 252, 245);
c_gold = make_colour_rgb(255,204,0);
leftx = 1353;
itemnamey = 226;
statAy = 310;
statBy = 336;
installtexty = 430;
pricex = 1547;
pricey = 490;




panelsdismissed = false;
graphicadded = false;


// create blue backing panel first unless one already exists
panelcheck = instance_place(bluepanelx + 4, bluepanely + 4, obj_BluePanel);

if panelcheck == noone instance_create(xview + bluepanelx, yview + bluepanely, obj_BluePanel);








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initial delay
if appearwait &gt; 0 appearwait -= 1

if appearwait &lt;= 0 &amp;&amp; panelappeared == false
    {
        fadein = true;
        script_execute(scr_fadeinout, fadein, fadeout, finalalpha, alphafade);
        if fadein == false panelappeared = true
    }


if panelappeared == true &amp;&amp; buttonsappeared == false
{
    // iterate through all of the Items checking which are unlocked and adding buttons as required
    weaponcount = 1;
    xpos = buttonx;
    ypos = buttony;
    
    for (r = 1; r &lt; 5; r += 1)
    {
        for(c = 1; c &lt; 7; c += 1)
            {
                if global.WeaponUnlocked[weaponcount] == true
                    {
                        show_debug_message("Adding Item: " + string(weaponcount));
                        inst = instance_create(xpos, ypos, obj_ItemButton);
                        with (inst)
                            {
                                weaponID = other.weaponcount;                        
                            }                                                            
                    }
                xpos += buttonxoffset;            
                if weaponcount &lt;= 24 weaponcount += 1
            } 
        xpos = buttonx;
        ypos += buttonyoffset; 
    }

    //add the weapon graphic- only do this once
    instance_create(weapongraphicx, weapongraphicy, obj_INVWeaponGraphic);


    buttonsappeared = true;

}

// now add the top panel detail based upon last button pressed- this updates every step unlike above ** Text is handled in drawGUI event **

if buttonsappeared == true &amp;&amp; panelsdismissed == false
{
    weaponID = global.WeaponViewed;    
    //add the Install or Equip Button Button
    if global.WeaponEquipped[weaponID] == false
        {
            if !instance_exists(obj_InstallButton) instance_create(installx, instally, obj_InstallButton);
        
        }
    else
        {
            //remove button if Item is already equipped
            if instance_exists(obj_InstallButton)
            {
                with(obj_InstallButton)
                {

                    instance_destroy();
                }
            
            }
        }

}


//remove the panels
if panelsdismissed == true &amp;&amp; fadeout = false
{

        
        obj_ItemButton.fadeDone = true;
        obj_INVWeaponGraphic.fadeDone = true;     

        
        if instance_exists(obj_InstallButton)
        {        
            obj_InstallButton.fadeDone = true;
        }

     
        //now fade the weaponry Panel                                                            
        fadein = false;        
        fadeout = true;
}



if fadeout == true &amp;&amp; panelappeared == true
{
    script_execute(scr_fadeinout, fadein, fadeout, finalalpha, alphafade);
    if fadeDone == true
        {
            instance_destroy();
        }

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw the Weapon Item Text

if buttonsappeared == true
{
    weaponID = global.WeaponViewed; 
    
    draw_set_font(fnt_Michroma14);
    draw_set_alpha(0.9);
    draw_set_colour(paleblue);
    draw_set_halign(fa_left);
    
    // item name        
    draw_text(leftx, itemnamey, global.WeaponName[weaponID]);
    draw_set_alpha(0.7);    
    //stats
    draw_text(leftx, statAy, global.WeaponStatA[weaponID]);
    draw_text(leftx, statBy, global.WeaponStatB[weaponID]);
    
    //install text
    if global.WeaponOwned[weaponID] == false
        {
            draw_text(leftx, installtexty, "INSTALL:");
        }
    else if global.WeaponEquipped[weaponID] == false
        {
            draw_text(leftx, installtexty, "EQUIP:");
        }
    else
        {        
            draw_text(leftx, installtexty, "EQUIPPED");      
        }
        
          
                        
    //Price if not owned
    if global.WeaponOwned[weaponID] == false
        {    
            draw_set_alpha(0.7);
            draw_set_font(fnt_HUD);
            draw_set_halign(fa_right);
            if global.WeaponCost[weaponID] &lt;= global.playerGold draw_set_colour(c_gold) else draw_set_colour(c_red)
            draw_text(pricex, pricey, string(global.WeaponCost[weaponID]));     
        }    

}    

draw_set_alpha(1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
